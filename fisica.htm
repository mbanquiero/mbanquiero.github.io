
<html><head><meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>Tutoriales de WEBGL </title>

<script type="text/javascript" src="glMatrix-0.9.5.min.js"></script>
<script type="text/javascript" src="mesh.js"></script>
<script type="text/javascript" src="mesh.js"></script>
<script type="text/javascript" src="body.js"></script>
<script type="text/javascript" src="constraint.js"></script>
<script type="text/javascript" src="world.js"></script>

<script id="shader-fs" type="x-shader/x-fragment">
	// ---------------- FRAGMENT_SHADER -----------------------------
    precision mediump float;
	varying vec4 vColor;
	varying vec3 vNormal;
	varying vec3 vPos;
	varying vec2 vTextureCoord;
    uniform vec3 vEye;
	uniform sampler2D uSampler;	
	
    void main(void) {

		gl_FragColor = texture2D(uSampler, vec2(vTextureCoord.s, vTextureCoord.t));
		if(gl_FragColor.a < 100.0 / 256.0)
			discard;
		//gl_FragColor.a = 1.0;
    }
	
</script>

<script id="shader-vs" type="x-shader/x-vertex">
	// ---------------- VERTEX_SHADER -----------------------------
    attribute vec3 aVertexPosition;
	attribute vec3 aVertexNormal;
    attribute vec2 aVertexTexCoords;
	uniform sampler2D uSampler;	
	
    uniform mat4 matWorld;
    uniform mat4 matView;
    uniform mat4 matProj;

	varying vec4 vColor;
	varying vec3 vNormal;
	varying vec3 vPos;
	varying vec2 vTextureCoord;

	uniform float time;
	
    void main(void) {
		
        gl_Position = matProj * matView * matWorld * vec4(aVertexPosition , 1.0);
		vColor = vec4(1.0,0.0,1.0,1.0);
		vNormal = aVertexNormal;
		vTextureCoord = aVertexTexCoords;
    }
</script>


<script type="text/javascript">


	// chrome render loop hack
	(function() {
	var requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame ||
                              window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;
	window.requestAnimationFrame = requestAnimationFrame;
	})();
	

	// Eventos
	var EV_NADA				= 0;
	var EV_PAN_REALTIME		= 1;
	var EV_3D_REALTIME		= 2;
	var eventoInterno = EV_NADA;
	var mouse_x = 0;
	var mouse_y = 0;

	function makeLookAt(cameraPosition, target, up, matView) {
	var xAxis = vec3.create();
	var yAxis = vec3.create();
	var zAxis = vec3.create();
	
	vec3.subtract(cameraPosition, target,zAxis)
	vec3.normalize(zAxis);
	vec3.cross(up, zAxis,xAxis);
	vec3.normalize(xAxis);
	vec3.cross(zAxis, xAxis,yAxis);

	var tx = vec3.dot(xAxis,cameraPosition);
	var ty = vec3.dot(yAxis,cameraPosition);
	var tz = vec3.dot(zAxis,cameraPosition);

	return [
			xAxis[0] , yAxis[0] , zAxis[0] , 0 , 
			xAxis[1] , yAxis[1] , zAxis[1] , 0 , 
			xAxis[2] , yAxis[2] , zAxis[2] , 0 , 
			-tx 	 ,		-ty ,	    -tz, 1
			]
		
	}
	
    var gl;
    function initGL(canvas) {
        try {
			gl = canvas.getContext("webgl", 
                 { antialias: true,
                   depth: true ,
				   alpha: false  
				   });            
		    gl.viewportWidth = canvas.width;
            gl.viewportHeight = canvas.height;
        } catch (e) {
        }
        if (!gl) {
            alert("Could not initialise WebGL, sorry :-(");
        }
    }

	// -------------- html stuff para cargar los shaders -----------------------
    function getShader(gl, id) {
        var shaderScript = document.getElementById(id);
        if (!shaderScript) {
            return null;
        }

        var str = "";
        var k = shaderScript.firstChild;
        while (k) {
            if (k.nodeType == 3) {
                str += k.textContent;
            }
            k = k.nextSibling;
        }

        var shader;
        if (shaderScript.type == "x-shader/x-fragment") {
            shader = gl.createShader(gl.FRAGMENT_SHADER);
        } else if (shaderScript.type == "x-shader/x-vertex") {
            shader = gl.createShader(gl.VERTEX_SHADER);
        } else {
            return null;
        }

        gl.shaderSource(shader, str);
        gl.compileShader(shader);

        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
            alert(gl.getShaderInfoLog(shader));
            return null;
        }

        return shader;
    }

	// inicializo los shaders
    var shaderProgram;
    function initShaders() {
        var fragmentShader = getShader(gl, "shader-fs");
        var vertexShader = getShader(gl, "shader-vs");

        shaderProgram = gl.createProgram();
        gl.attachShader(shaderProgram, vertexShader);
        gl.attachShader(shaderProgram, fragmentShader);
        gl.linkProgram(shaderProgram);

        if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
            alert("Could not initialise shaders");
        }

        gl.useProgram(shaderProgram);

        shaderProgram.vertexPositionAttribute = gl.getAttribLocation(shaderProgram, "aVertexPosition");
        gl.enableVertexAttribArray(shaderProgram.vertexPositionAttribute);
		
        shaderProgram.vertexNormalAttribute = gl.getAttribLocation(shaderProgram, "aVertexNormal");
        gl.enableVertexAttribArray(shaderProgram.vertexNormalAttribute);

        shaderProgram.vertexTexCoordsAttribute = gl.getAttribLocation(shaderProgram, "aVertexTexCoords");
        gl.enableVertexAttribArray(shaderProgram.vertexTexCoordsAttribute);
		
		
		
    }

	// matrices de transformacion
    var matView = mat4.create();
    var matWorld = mat4.create();
    var matProj = mat4.create();

    function setMatrixUniforms() {
        gl.uniformMatrix4fv(gl.getUniformLocation(shaderProgram, "matWorld"), false, matWorld);
        gl.uniformMatrix4fv(gl.getUniformLocation(shaderProgram, "matView"), false, matView);
        gl.uniformMatrix4fv(gl.getUniformLocation(shaderProgram, "matProj"), false, matProj);
    }

	// textura x default (si no encuentra alguna de la escena)
	var texture_default;
	function initTextures() 	{
		texture_default = gl.createTexture();
		var img = new Image();
		img.onload = function() { handleTextureLoaded(img, texture_default); }
		img.src = "media/default.png";
	}

	function handleTextureLoaded(image, texture) {
		gl.bindTexture(gl.TEXTURE_2D, texture);
		gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_NEAREST);
		gl.generateMipmap(gl.TEXTURE_2D);
		gl.bindTexture(gl.TEXTURE_2D, null);
	}
	
	// render loop
	var feps = 0;
	var time = 0;
	var vLookFrom = [320, 220, 220];
	var vLookAt = [0, 0, 0];
    function render(elapsed_time) {
		if(!myMesh.loaded)
			return;
			
		if(key_space)
			 gravity = [0, (yPos-300)*gravityScale,(xPos-300)*gravityScale];
		else
			 gravity = [0, -11000,-11000];
			
			
			
		// fisica
		_world.Update(fixed_dt);

		gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

        mat4.perspective(45, gl.viewportWidth / gl.viewportHeight, 1.0, 3000.0, matProj);
        mat4.identity(matWorld);
		
		time += elapsed_time;
		
        gl.uniform3fv(gl.getUniformLocation(shaderProgram, "vEye"), vLookFrom);
        gl.uniform1f(gl.getUniformLocation(shaderProgram, "time"), time);
		gl.bindTexture(gl.TEXTURE_2D, texture_default);

        matView = makeLookAt(vLookFrom, vLookAt, [0,1,0]);


		var ex = 0.2;
		for(var i =0;i<_world.m_bodyCount;++i)
		{
			var A = _world.bodies[i];
			mat4.identity(myMesh.matWorld);
			mat4.scale(myMesh.matWorld , [ex,ex,ex]);
			mat4.translate(myMesh.matWorld , A.position);
			setMatrixUniforms();
			myMesh.render();
		}
		
    }

	var myMesh;
	function initMeshes()
	{
		myMesh = new mesh("media/Sphere.msh");
	}

	
	var _world = new World();
	var gravityScale = -50;
	var gravity = [0, 10 * gravityScale,0];
	var fixed_dt = 1.0/60.0;								// avance del tiempo constante
	
	function initWorld()
	{
		/*
		var A = _world.AddBody(0,400,0);
		A.SetStatic();
		var B = _world.AddBody(0,0,0);
		B.velocity[0] = 1;
		*/
		
		/*
		var A = _world.AddBody(0,0,0);
		A.SetStatic();
		for(var i =1;i<20;++i)
		{
			var B = _world.AddBody(0,0,i*50);
			_world.AddJointConstraint(A,B);
			A = B;
		}
		A.SetStatic();
		*/
		
		var cero = _world.AddBody(0,0,0);
		cero.SetStatic();
		var r = 500;
		var primero = true;
		var t = 0;
		var G = []
		var di = 20;
		var dj = 20;
		for(var i =0;i<di;++i)
		{
			G[i] = [];
			for(var j =0;j<dj;++j)
			{	
				var X = i/20 * 6 - 3;
				var Y = j/20 * 6 - 3;
				var Z=X*X*X*X + Y*Y*Y*Y - 4*X*Y + 1;
				G[i][j] = _world.AddBody(X*200,Y*200,Z*6);
			}
		}
		
		for(var i =1;i<di;++i)
		{
			for(var j =1;j<dj;++j)
			{
				_world.AddJointConstraint(G[i][j],G[i-1][j]);
				_world.AddJointConstraint(G[i][j],G[i][j-1]);
				_world.AddJointConstraint(G[i][j],G[i-1][j-1]);
			}
		}
		
		for(var i =0;i<di;++i)
		{
			G[i][0].SetStatic();
			G[i][dj-1].SetStatic();
		}
		
		for(var j =0;j<dj;++j)
		{
			G[0][j].SetStatic();
			G[di-1][j].SetStatic();
		}
		
	}
	
	
	var lastTime = 0;
	function RenderLoop()
	{
		requestAnimationFrame(RenderLoop);
		var timeNow = new Date().getTime();
		if (lastTime != 0) {
			var elapsed = timeNow - lastTime;
			render(elapsed);
		}
		lastTime = timeNow;
	 }
	
// ---------------------- EVENTOS DEL MOUSE ----------------------
var xPos = 0;
var yPos = 0;
function onMouseMove() 
{
	 xPos = window.event.offsetX;
	 yPos = window.event.offsetY;

	switch (eventoInterno) {
	    case EV_3D_REALTIME:
			var dx = xPos - mouse_x;
			var dy = yPos - mouse_y;
			vLookFrom[1] += dy;
			var x = vLookFrom[0];
			var z = vLookFrom[2];
			var an = dx / 800 * 3.1415;
			vLookFrom[0] = x*Math.cos(an) - z*Math.sin(an);
			vLookFrom[2] = x*Math.sin(an) + z*Math.cos(an);
	        break;

	    case EV_PAN_REALTIME:
			var dx = xPos - mouse_x;
			var dy = yPos - mouse_y;
			var xAxis = vec3.create();
			var yAxis = vec3.create();
			var zAxis = vec3.create();
			vec3.subtract(vLookFrom, vLookAt,zAxis)
			vec3.normalize(zAxis);
			vec3.cross([0,1,0], zAxis,xAxis);
			vec3.normalize(xAxis);
			vec3.cross(zAxis, xAxis,yAxis);
			var k = 0.5;
			var desf_x = -xAxis[0]*dx*k + yAxis[0]*dy*k;
			var desf_y = -xAxis[1]*dx*k + yAxis[1]*dy*k;
			var desf_z = -xAxis[2]*dx*k + yAxis[2]*dy*k;
			vLookFrom[0] += desf_x;
			vLookFrom[1] += desf_y;
			vLookFrom[2] += desf_z;
			vLookAt[0] += desf_x;
			vLookAt[1] += desf_y;
			vLookAt[2] += desf_z;
			
	        break;
			
	}

    // actualizo la posicion del mouse
	mouse_x = xPos;
	mouse_y = yPos;
}

function onMouseDown(e) {
    e = e || window.event;
    switch (e.which)
    {
        case 1:
            // Left button
            // WM_LBUTTONDOWN
            mouse_x = window.event.offsetX;
            mouse_y = window.event.offsetY;
			eventoInterno = EV_3D_REALTIME;
            break;
        case 2:
            mouse_x = window.event.offsetX;
            mouse_y = window.event.offsetY;
			eventoInterno = EV_PAN_REALTIME;
            break;
        case 3:
            // right button
            break;
    }
}


function onMouseUp(e) {
    e = e || window.event;
    switch (e.which) {
        case 1:
            // Left button
            // WM_LBUTTONUP
            eventoInterno = EV_NADA;
            break;
        case 2:
            // middle button
            // WM_MBUTTONUP
            // termino event de pan realtime
            eventoInterno = EV_NADA;
            break;
        case 3:
            // right button
            break;
    }
}


function onMouseWheel(e) {

    var delta = e.wheelDelta;
    // ajusto la escala
	var viewdir = vec3.create();
	vec3.subtract(vLookFrom,vLookAt,viewdir)
	var dist = vec3.length(viewdir);
	vec3.normalize(viewdir)
	if(delta>0)
		dist *= 0.9;
	else
		dist *= 1.1;
	vLookFrom[0] = vLookAt[0] + viewdir[0]*dist; 
	vLookFrom[1] = vLookAt[1] + viewdir[1]*dist; 
	vLookFrom[2] = vLookAt[2] + viewdir[2]*dist; 
}

	var key_space = false;
	function doKeyDown(e) 
	{
		if(e.keyCode==32)
			key_space = true;
	}

	function doKeyUp(e) 
	{
		if(e.keyCode==32)
			key_space = false;
	}

	

    function webGLStart() {
		
		document.addEventListener("mousemove", onMouseMove, true);
		document.addEventListener("mousedown", onMouseDown, true);
		document.addEventListener("mouseup", onMouseUp, true);
		document.addEventListener("mousewheel", onMouseWheel, true);
		document.addEventListener( "keydown", doKeyDown, true);
		document.addEventListener( "keyup", doKeyUp, true);

        var canvas = document.getElementById("canvas");
        initGL(canvas);
        initShaders();
		initTextures();
        initMeshes();
		initWorld();
		gl.clearColor(0.5, 0.5, 0.5, 1.0);
        gl.enable(gl.DEPTH_TEST);
		gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);		
		gl.enable(gl.BLEND);
        RenderLoop();
    }
	
	
	function loadMesh() {  
	  var file = document.getElementById('file').files[0];
	  myMesh = new mesh('media/'+file.name);

	}
	
	
</script>

</head>


<body onload="webGLStart();">
    <canvas id="canvas" style="border: none;" width="1000" height="600"></canvas>
</body>
</html>