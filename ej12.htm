

<html><head><meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>Video juegos UADE </title>


<script type="text/javascript" src="glMatrix-0.9.5.min.js"></script>

<script id="shader-fs" type="x-shader/x-fragment">
    precision mediump float;
	varying vec4 vColor;
	varying vec3 vNormal;
	varying vec3 vPos;
	varying vec2 vTextureCoord;
    uniform vec3 vEye;
	uniform sampler2D uSampler;	
	
    void main(void) {
	
		vec3 color_base = texture2D(uSampler, vec2(vTextureCoord.s, vTextureCoord.t)).rgb;

		// luz diffuse
		vec3 LightPos = vec3(0.0,10.0,0.0);
		vec3 N = normalize(vNormal);
		vec3 L = normalize(LightPos - vPos);
		float kd = clamp(dot(vNormal,L) *0.7 , 0.0 , 1.0);
		vec3 diffuse = color_base * kd;
		
		// luz specular
		vec3 D = normalize(vPos-vEye);
		float ks = clamp(dot(reflect(L,N), D) , 0.0 , 1.0);
		ks = pow(ks ,5.0);
		vec3 specular = vec3(1.0 , 1.0 , 1.0) * ks;
		// luz ambiente
		vec3 ambient = vec3(1.0 , 1.0 , 1.0) * 0.2;
		
        gl_FragColor.rgb = clamp(diffuse + specular + ambient , 0.0 , 1.0);
        gl_FragColor.a = 1.0;

    }
</script>

<script id="shader-vs" type="x-shader/x-vertex">
    attribute vec3 aVertexPosition;
	
    uniform mat4 matWorld;
    uniform mat4 matView;
    uniform mat4 matProj;

	varying vec4 vColor;
	varying vec3 vNormal;
	varying vec3 vPos;
	varying vec2 vTextureCoord;

	uniform float time;
	
    float HeighMap(float x,float z) {
		return 0.7*sin(0.2*x+time*0.005) + 0.8*cos(0.3*z+time*0.005) 
		+ 0.3*sin(1.0*x+time*0.0011) + 0.2*cos(2.0*z+time*0.0015)
		+ 0.05*sin(5.0*x+time*0.011) + 0.02*cos(2.0*z+time*0.015);
			 

	}

	vec3 HeighMapNormal(float x,float z){
		float ep = 0.01;
		float y = HeighMap(x,z);
		float yx = HeighMap(x+ep,z);
		float yz = HeighMap(x,z+ep);
		vec3 fx = vec3(ep , yx-y , 0.0);
		vec3 fz = vec3(0.0 ,yz-y, ep );
		return normalize(cross(fz,fx));
		
	}
	
    void main(void) {
		
		float x = aVertexPosition.x;
		float z = aVertexPosition.z;
		vPos = vec3(x,HeighMap(x,z),z);
        gl_Position = matProj * matView * vec4(vPos , 1.0);
		vColor = vec4(1.0,0.0,1.0,1.0);
		vNormal = HeighMapNormal(x,z);
		vTextureCoord = vec2(x+time*0.05,z)*0.05;
    }
</script>


<script type="text/javascript">


	(function() {
	var requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame ||
                              window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;
	window.requestAnimationFrame = requestAnimationFrame;
	})();
	


	function makeLookAt(cameraPosition, target, up, matView) {
	var xAxis = vec3.create();
	var yAxis = vec3.create();
	var zAxis = vec3.create();
	
	vec3.subtract(cameraPosition, target,zAxis)
	vec3.normalize(zAxis);
	vec3.cross(up, zAxis,xAxis);
	vec3.normalize(xAxis);
	vec3.cross(zAxis, xAxis,yAxis);

	var tx = vec3.dot(xAxis,cameraPosition);
	var ty = vec3.dot(yAxis,cameraPosition);
	var tz = vec3.dot(zAxis,cameraPosition);

	return [
			xAxis[0] , yAxis[0] , zAxis[0] , 0 , 
			xAxis[1] , yAxis[1] , zAxis[1] , 0 , 
			xAxis[2] , yAxis[2] , zAxis[2] , 0 , 
			-tx 	 ,		-ty ,	    -tz, 1
			]
		
	}
	
    var gl;
    function initGL(canvas) {
        try {
			gl = canvas.getContext("webgl", 
                 { antialias: false,
                   depth: true });            
		    gl.viewportWidth = canvas.width;
            gl.viewportHeight = canvas.height;
        } catch (e) {
        }
        if (!gl) {
            alert("Could not initialise WebGL, sorry :-(");
        }
    }


    function getShader(gl, id) {
        var shaderScript = document.getElementById(id);
        if (!shaderScript) {
            return null;
        }

        var str = "";
        var k = shaderScript.firstChild;
        while (k) {
            if (k.nodeType == 3) {
                str += k.textContent;
            }
            k = k.nextSibling;
        }

        var shader;
        if (shaderScript.type == "x-shader/x-fragment") {
            shader = gl.createShader(gl.FRAGMENT_SHADER);
        } else if (shaderScript.type == "x-shader/x-vertex") {
            shader = gl.createShader(gl.VERTEX_SHADER);
        } else {
            return null;
        }

        gl.shaderSource(shader, str);
        gl.compileShader(shader);

        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
            alert(gl.getShaderInfoLog(shader));
            return null;
        }

        return shader;
    }


    var shaderProgram;

    function initShaders() {
        var fragmentShader = getShader(gl, "shader-fs");
        var vertexShader = getShader(gl, "shader-vs");

        shaderProgram = gl.createProgram();
        gl.attachShader(shaderProgram, vertexShader);
        gl.attachShader(shaderProgram, fragmentShader);
        gl.linkProgram(shaderProgram);

        if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
            alert("Could not initialise shaders");
        }

        gl.useProgram(shaderProgram);

        shaderProgram.vertexPositionAttribute = gl.getAttribLocation(shaderProgram, "aVertexPosition");
        gl.enableVertexAttribArray(shaderProgram.vertexPositionAttribute);

    }


    var matView = mat4.create();
    var matWorld = mat4.create();
    var matProj = mat4.create();

    function setMatrixUniforms() {
        gl.uniformMatrix4fv(gl.getUniformLocation(shaderProgram, "matWorld"), false, matWorld);
        gl.uniformMatrix4fv(gl.getUniformLocation(shaderProgram, "matView"), false, matView);
        gl.uniformMatrix4fv(gl.getUniformLocation(shaderProgram, "matProj"), false, matProj);
    }


	var vertexPositionBuffer;
	
    function initBuffers() {
	
		var t = 0;
        var vertices = [];
		var cant_v = 0;
		
		var dx = 1;
		var dy = 1;
		for(var x=-80;x<80;x+=dx)
		for(var y=-80;y<80;y+=dy)
		{
			var x0 = x;
			var y0 = y;

			var x1 = x + dx;
			var y1 = y;
			
			var x2 = x;
			var y2 = y + dy;
			
			var x3 = x + dx;
			var y3 = y + dy;
			
			vertices[t++] = x0;
			vertices[t++] = 0;
			vertices[t++] = y0;
			
			vertices[t++] = x1;
			vertices[t++] = 0;
			vertices[t++] = y1;

			vertices[t++] = x2;
			vertices[t++] = 0;
			vertices[t++] = y2;


			vertices[t++] = x1;
			vertices[t++] = 0;
			vertices[t++] = y1;

			vertices[t++] = x2;
			vertices[t++] = 0;
			vertices[t++] = y2;

			vertices[t++] = x3;
			vertices[t++] = 0;
			vertices[t++] = y3;

			cant_v+=6;
		}
		

        vertexPositionBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, vertexPositionBuffer);
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
        vertexPositionBuffer.itemSize = 3;
        vertexPositionBuffer.numItems = cant_v;

    }
	
	var texture;
	function initTextures() 	{
		texture = gl.createTexture();
		waterImage = new Image();
		waterImage.onload = function() { handleTextureLoaded(waterImage, texture); }
		waterImage.src = "water.bmp";
	}

	function handleTextureLoaded(image, texture) {
		gl.bindTexture(gl.TEXTURE_2D, texture);
		gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);
		  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
		  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_NEAREST);
		  gl.generateMipmap(gl.TEXTURE_2D);
		  gl.bindTexture(gl.TEXTURE_2D, null);
	}
	
	var angle = 0;
	var time = 0;
    function render(elapsed_time) {
        gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

        mat4.perspective(45, gl.viewportWidth / gl.viewportHeight, 1.0, 300.0, matProj);
        mat4.identity(matWorld);
		
		angle += elapsed_time*0.001;
		time += elapsed_time;
		
		var vLookFrom = [30*Math.cos(angle), 20, 30*Math.sin(angle)];
		var vLookAt = [0, 0, 0];
        gl.uniform3fv(gl.getUniformLocation(shaderProgram, "vEye"), vLookFrom);
        gl.uniform1f(gl.getUniformLocation(shaderProgram, "time"), time);
		
        matView = makeLookAt(vLookFrom, vLookAt, [0,1,0]);
		
		gl.bindBuffer(gl.ARRAY_BUFFER, vertexPositionBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, vertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);

		gl.activeTexture(gl.TEXTURE0);
		gl.bindTexture(gl.TEXTURE_2D, texture);
		gl.uniform1i(shaderProgram.samplerUniform, 0);
		
        setMatrixUniforms();
        gl.drawArrays(gl.TRIANGLES, 0, vertexPositionBuffer.numItems);

    }


	var lastTime = 0;
	function RenderLoop()
	{
		requestAnimationFrame(RenderLoop);
		var timeNow = new Date().getTime();
		if (lastTime != 0) {
			var elapsed = timeNow - lastTime;
			render(elapsed);
		}
		lastTime = timeNow;
	 }
	

    function webGLStart() {
        var canvas = document.getElementById("canvas");
        initGL(canvas);
        initShaders();
        initBuffers();
        initTextures();
		gl.clearColor(0.0, 0.0, 0.0, 1.0);
        gl.enable(gl.DEPTH_TEST);
        RenderLoop();
    }
</script>

</head>


<body onload="webGLStart()">
    <canvas id="canvas" style="border: none;" width="1100" height="600"></canvas>
</body>
</html>